{"version":3,"sources":["components/Header.js","components/Complaint.js","components/PastComplaints.js","components/Default.js","App.js","serviceWorker.js","index.js","components/Components.module.css"],"names":["Header","props","state","isNavOpen","toggleNav","bind","this","setState","Navbar","dark","className","Styles","nvbr","expand","NavbarToggler","onClick","abslt","NavbarBrand","to","navlink","icon","faHome","Collapse","isOpen","navbar","Nav","NavItem","faPlusSquare","faArchive","Component","Map","ReactMapboxGl","accessToken","Complaint","topic","description","lattitude","longitude","getLocation","getCoordinates","onChangeInput","onClickMap","event","navigator","geolocation","getCurrentPosition","alert","preventDefault","position","coords","latitude","target","name","value","map","evt","lngLat","lat","lng","C_input","onChange","type","placeholder","btn","fill_button","style","containerStyle","height","width","center","zoom","PastComplaint","empty_button","App","path","component","PastComplaints","Default","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.38bbcf54.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {NavLink,Link} from 'react-router-dom'\r\nimport Styles from './Components.module.css';\r\nimport { Navbar, NavbarBrand,Nav, NavbarToggler, Collapse , NavItem } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faPlusSquare, faArchive } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Header extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isNavOpen:false,\r\n        };\r\n        this.toggleNav=this.toggleNav.bind(this);\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen:!this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Navbar dark className={`${Styles.nvbr}`} expand=\"md\">\r\n                <div className=\"container\" >\r\n                    <NavbarToggler onClick={this.toggleNav} className={Styles.abslt}/>\r\n                    <NavbarBrand  className=\"mr-auto \">\r\n                        <NavLink to=\"/\"  className={Styles.navlink}><FontAwesomeIcon icon={faHome} />&nbsp;ComplaintDesk</NavLink>\r\n                    </NavbarBrand>\r\n                    <Collapse isOpen={this.state.isNavOpen } navbar>\r\n                        <Nav navbar className=\"ml-auto\">\r\n                            <NavItem>\r\n                                <NavLink className={`${Styles.navlink}`} to=\"/newcomplaint\">\r\n                                <FontAwesomeIcon icon={faPlusSquare} />&nbsp;New Complaint&nbsp;&nbsp;\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className={`${Styles.navlink}`} to=\"/pastcomplaints\">\r\n                                <FontAwesomeIcon icon={faArchive} />&nbsp;Past Complaints\r\n                                </NavLink>\r\n                            </NavItem>\r\n\r\n                        </Nav>\r\n                    </Collapse>\r\n                    \r\n                </div>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport Styles from './Components.module.css';\r\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken:\r\n    'pk.eyJ1IjoicmFnaHVyYWpqIiwiYSI6ImNrMnJpYzhzZjA2MGIzZXBkb2oxYnV2MWQifQ.1PinwGk6Y3P0q-l7SXkfWg'\r\n});\r\n\r\nclass Complaint extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            topic:\"\",\r\n            description:\"\",\r\n            lattitude:\"\",\r\n            longitude:\"\"\r\n        };\r\n        this.getLocation= this.getLocation.bind(this);\r\n        this.getCoordinates=this.getCoordinates.bind(this);\r\n        this.onChangeInput=this.onChangeInput.bind(this);\r\n        this.onClickMap=this.onClickMap.bind(this);\r\n    }\r\n\r\n    getLocation(event) {\r\n        if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(this.getCoordinates);\r\n        } else {\r\n          alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    getCoordinates(position)\r\n    {\r\n        this.setState({\r\n            lattitude:position.coords.latitude,\r\n            longitude:position.coords.longitude\r\n        })\r\n    }\r\n\r\n    onChangeInput(event){\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    }\r\n\r\n    onClickMap(map, evt) {\r\n        this.setState({\r\n            lattitude:evt.lngLat.lat,\r\n            longitude:evt.lngLat.lng\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row my-5 mx-5\">\r\n                <div className=\"col\">\r\n                    <form>\r\n                        <div className={Styles.C_input}>\r\n                            <input onChange={this.onChangeInput}  type=\"text\" name=\"topic\" placeholder=\"Topic\"/><br/> \r\n                        </div>  \r\n                        <div className={Styles.C_input}>\r\n                            <textarea onChange={this.onChangeInput} type=\"text\" name=\"description\" placeholder=\"Description\"/><br/> \r\n                        </div> \r\n                        <div className={Styles.C_input}>\r\n                            <input onChange={this.onChangeInput} type=\"number\" name=\"lattitude\" placeholder=\"Lattitude\" value={this.state.lattitude}/><br/> \r\n                        </div> \r\n                        <div className={Styles.C_input}>\r\n                            <input onChange={this.onChangeInput} type=\"number\" name=\"longitude\" placeholder=\"Longitude\" value={this.state.longitude}/><br/> \r\n                        </div> \r\n\r\n                        <button onClick={this.getLocation }   className={`${Styles.btn} ${Styles.fill_button}`}>getlocation</button>\r\n                        \r\n                    </form>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <Map\r\n                        style=\"mapbox://styles/mapbox/streets-v9\"\r\n                        containerStyle={{\r\n                            height: '50vh',\r\n                            width: '50vw'\r\n                        }}\r\n                        center={[80.94615925,26.8467088]}\r\n                        zoom={[9]}\r\n                        onClick={this.onClickMap}\r\n                    />\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Complaint;","import React from 'react';\r\nimport Styles from './Components.module.css';\r\n\r\nconst PastComplaint = ()=>{\r\n    return(\r\n        <div>\r\n            <button className={`${Styles.btn} ${Styles.fill_button}`}>PastComplaint </button>\r\n            <button className={`${Styles.btn} ${Styles.empty_button}`}>PastComplaint </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PastComplaint;","import React from 'react';\r\nimport Styles from './Components.module.css';\r\n\r\nconst PastComplaint = ()=>{\r\n    return(\r\n        <div>\r\n            <h1>Opps! wrong page!!</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PastComplaint;","import React from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {Switch,Route} from 'react-router-dom';\nimport Header from './components/Header';\nimport Complaint from './components/Complaint';\nimport PastComplaints from './components/PastComplaints';\nimport Default from './components/Default';\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Switch>\n        <Route path=\"/newcomplaint\" component={Complaint} />\n        <Route path=\"/pastcomplaints\" component={PastComplaints} />\n        <Route component={Default} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nvbr\":\"Components_nvbr__3iG-Z\",\"navlink\":\"Components_navlink__24IkJ\",\"toggler\":\"Components_toggler__2Yk1k\",\"btn\":\"Components_btn__1U7OY\",\"fill_button\":\"Components_fill_button__3WKKB\",\"empty_button\":\"Components_empty_button__26J0a\",\"form\":\"Components_form__2izBT\",\"C_input\":\"Components_C_input__HAbIC\"};"],"sourceRoot":""}